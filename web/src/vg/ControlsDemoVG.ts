// Package: com.lightningkite.rxexample.vg
// Generated by Khrysalis - this file will be overwritten.
import { ControlsDemoBinding } from '../resources/layouts/ControlsDemoBinding'
import { ViewGenerator, bind, chain, elementEnabled, intToString, showInInput, showInSelect, subscribeAutoDispose } from '@lightningkite/rxjs-plus'
import { BehaviorSubject } from 'rxjs'
import { map } from 'rxjs/operators'

//! Declares com.lightningkite.rxexample.vg.ControlsDemoVG
export class ControlsDemoVG implements ViewGenerator {
    public static implementsViewGenerator = true;
    public constructor() {
        this.text = new BehaviorSubject("");
        this.options = new BehaviorSubject(["Apple", "Banana", "Chili Pepper", "Dragon Fruit"]);
        this._number = new BehaviorSubject(32);
        this.isOn = new BehaviorSubject(false);
    }
    
    //! Declares com.lightningkite.rxexample.vg.ControlsDemoVG.titleString
    public get titleString(): string { return "Controls Demo"; }
    
    
    public readonly text: BehaviorSubject<string>;
    public readonly options: BehaviorSubject<Array<string>>;
    public readonly _number: BehaviorSubject<number>;
    public readonly isOn: BehaviorSubject<boolean>;
    
    public generate(dependency: Window): HTMLElement {
        const xml = ControlsDemoBinding.inflate();
        const view = xml.root;
        
        this.isOn.pipe(bind(xml.check.input, "checked", "input")).pipe(bind(xml.toggleSwitch.input, "checked", "input")).pipe(bind(xml.checkAlt.input, "checked", "input"));
        this._number.pipe(map((it: number): boolean => (it > 5))).pipe(subscribeAutoDispose(xml.checkAlt, elementEnabled));
        this._number.pipe(intToString).pipe(bind(xml.numberText, "value", "input"));
        this.text.pipe(bind(xml.editableText, "value", "input")).pipe(bind(xml.editableAutoText, "value", "input")).pipe(bind(xml.editableTextBig, "value", "input")).pipe(subscribeAutoDispose(xml.editableTextCopy, "textContent")).pipe(subscribeAutoDispose(xml.toggleSwitch, chain("label", "textContent")));
        this.options.pipe(showInInput(xml.editableAutoText, this.text, undefined)).pipe(showInSelect(xml.spinner, this.text));
        
        return view;
    }
}
