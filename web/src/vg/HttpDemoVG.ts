// File: /home/jivie/Projects/khrysalis-full-example/android/src/main/java/com/lightningkite/rxexample/vg/HttpDemoVG.kt
// Package: com.lightningkite.rxexample.vg
// Generated by Khrysalis - this file will be overwritten.
import { Post } from '../models/Post'
import { HttpDemoBinding } from '../resources/layouts/HttpDemoBinding'
import { HttpClient, HttpProgress, ViewGenerator, approximateProgress, fromJSON, showIn, subscribeAutoDispose } from '@lightningkite/rxjs-plus'
import { Observable, concat, filter, of, map as rMap } from 'rxjs'
import { ComponentTextBinding } from '../resources/layouts/ComponentTextBinding'
import { map } from 'rxjs/operators'

//! Declares com.lightningkite.rxexample.vg.HttpDemoVG
export class HttpDemoVG implements ViewGenerator {
    public static implementsViewGenerator = true;
    public constructor() {
    }
    
    
    
    //! Declares com.lightningkite.rxexample.vg.HttpDemoVG.titleString
    public get titleString(): string { return "Http Demo"; }
    
    
    public generate(dependency: Window): HTMLElement {
        const xml = HttpDemoBinding.inflate();
        const view = xml.root;
        
        //--- Call
        const call = HttpClient.INSTANCE.callWithProgress<Array<Post>>("https://jsonplaceholder.typicode.com/posts/", undefined, undefined, undefined, undefined, (it: Response): Observable<Array<Post>> => of(it).pipe(fromJSON<Array<Post>>([Array, [Post]])));
        
        //--- Set Up xml.progress
        concat(of(0), call.pipe(map((it: HttpProgress<Array<Post>>): number => approximateProgress(it)))).pipe(subscribeAutoDispose(xml.progress, "value"));
        
        //--- Set Up xml.items
        concat(of([new Post(0, 0, "Loading...", "-")]), call.pipe(rMap((it: HttpProgress<Array<Post>>): (Array<Post> | null) => it.response), filter((x): x is Array<Post> => x !== null))).pipe(showIn(xml.items, (observable: Observable<Post>): HTMLElement => {
            //--- Make Subview For xml.items
            const cellXml = ComponentTextBinding.inflate();
            const cellView = cellXml.root;
            
            //--- Set Up cellXml.label
            observable.pipe(map((it: Post): string => it.title)).pipe(subscribeAutoDispose(cellXml.label, "textContent"));
            //--- End Make Subview For xml.items
            return cellView;
        }));
        
        //--- Generate End (overwritten on flow generation)
        
        return view;
    }
    
    //--- Init
    
    
    
    //--- Actions
    
    
    //--- Body End
}
