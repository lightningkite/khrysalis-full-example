// Package: com.lightningkite.rxexample.vg
// Generated by Khrysalis - this file will be overwritten.
import { MainBinding } from '../resources/layouts/MainBinding'
import { ExampleContentVG } from './ExampleContentVG'
import { SelectDemoVG } from './SelectDemoVG'
import { EntryPoint, HasBackActionDefaults, StackSubject, ViewGenerator, onThrottledEventDo, showInSwap, subscribeAutoDispose, viewVisible, xStackPop, xStackPush } from '@lightningkite/rxjs-plus'
import { takeLastOr } from 'iter-tools-es'
import { BehaviorSubject, Observable } from 'rxjs'
import { map } from 'rxjs/operators'

//! Declares com.lightningkite.rxexample.vg.MainVG
export class MainVG implements ViewGenerator, EntryPoint {
    public static implementsViewGenerator = true;
    public static implementsEntryPoint = true;
    public static implementsHasBackAction = true;
    public constructor() {
        this.stack = new BehaviorSubject(([] as Array<ViewGenerator>));
        this.shouldBackBeShown = this.stack.pipe(map((it: Array<ViewGenerator>): boolean => (it.length > 1)));
        xStackPush(this.stack, new SelectDemoVG(this.stack));
    }
    
    //! Declares com.lightningkite.rxexample.vg.MainVG.titleString
    public get titleString(): string { return "Main"; }
    
    
    public readonly stack: StackSubject<ViewGenerator>;
    //! Declares com.lightningkite.rxexample.vg.MainVG.mainStack
    public get mainStack(): (StackSubject<ViewGenerator> | null) { return this.stack; }
    
    public readonly shouldBackBeShown: Observable<boolean>;
    
    
    
    public generate(dependency: Window): HTMLElement {
        const xml = MainBinding.inflate();
        const view = xml.root;
        
        this.stack.pipe(showInSwap(xml.mainContent));
        
        this.stack.pipe(map((it: Array<ViewGenerator>): string => (((): (string | null) => {
            const temp14 = (takeLastOr(null, it)!?.titleString ?? null);
            if(temp14 === null) { return null }
            return temp14
        })() ?? ""))).pipe(subscribeAutoDispose(xml.title, "textContent"));
        
        this.shouldBackBeShown.pipe(subscribeAutoDispose(xml.mainBack, viewVisible));
        
        onThrottledEventDo(xml.mainBack, 'click', (): void => {
            xStackPop(this.stack);
        });
        
        return view;
    }
    
    public handleDeepLink(schema: string, host: string, path: string, params: Map<string, string>): void {
        xStackPush(this.stack, new ExampleContentVG());
    }
    
    public onBackPressed(): boolean { return HasBackActionDefaults.onBackPressed(this); }
}
