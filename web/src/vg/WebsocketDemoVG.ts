// Package: com.lightningkite.rxexample.vg
// Generated by Khrysalis - this file will be overwritten.
import { ComponentTextBinding } from '../resources/layouts/ComponentTextBinding'
import { WebsocketDemoBinding } from '../resources/layouts/WebsocketDemoBinding'
import { HasTitle } from './HasTitle'
import { HttpClient, ViewGenerator, WebSocketFrame, WebSocketInterface, bind, elementRemoved, onThrottledEventDo, showIn, subscribeAutoDispose } from '@lightningkite/rxjs-plus'
import { BehaviorSubject, Observable, concat, of } from 'rxjs'
import { map, publishReplay, refCount, retry, switchMap, take } from 'rxjs/operators'

//! Declares com.lightningkite.rxexample.vg.WebsocketDemoVG
export class WebsocketDemoVG implements ViewGenerator, HasTitle {
    public static implementsViewGenerator = true;
    public static implementsHasTitle = true;
    public constructor() {
        this.socket = HttpClient.INSTANCE
            .webSocket("wss://echo.websocket.events").pipe(publishReplay(1)).pipe(refCount());
        this.text = new BehaviorSubject("");
    }
    
    
    //! Declares com.lightningkite.rxexample.vg.WebsocketDemoVG.title
    public get title(): string { return "Websocket Demo"; }
    
    
    public readonly socket: Observable<WebSocketInterface>;
    
    public readonly text: BehaviorSubject<string>;
    
    public generate(dependency: Window): HTMLElement {
        const xml = WebsocketDemoBinding.inflate();
        const view = xml.root;
        
        //--- Set Up xml.items
        let responses = ([] as Array<WebSocketFrame>);
        
        concat(of(responses), this.socket.pipe(switchMap((it: WebSocketInterface): Observable<WebSocketFrame> => (it.read))).pipe(map((it: WebSocketFrame): Array<WebSocketFrame> => {
            responses = responses.concat([it]);
            if (responses.length > 20) {
                responses = responses.slice(-20);
            }
            return responses;
        }))).pipe(retry()).pipe(showIn(xml.items, (observable: Observable<WebSocketFrame>): HTMLElement => {
            //--- Make Subview For xml.items (overwritten on flow generation)
            const cellXml = ComponentTextBinding.inflate();
            const cellView = cellXml.root;
            
            //--- Set Up cellXml.label
            observable.pipe(map((it: WebSocketFrame): string => (it.text ?? ""))).pipe(subscribeAutoDispose(cellXml.label, "textContent"));
            //--- End Make Subview For xml.items (overwritten on flow generation)
            return cellView;
        }));
        
        //--- Set Up xml.input
        this.text.pipe(bind(xml.input, "value", "input"));
        
        //--- Set Up xml.submit
        onThrottledEventDo(xml.submit, 'click', (): void => {
            elementRemoved(xml.submit).parts.push(this.socket.pipe(take(1)).subscribe((it: WebSocketInterface): void => {
                it.write.next({ text: this.text.value, binary: null });
            }, undefined, undefined));
        });
        
        //--- Generate End (overwritten on flow generation)
        
        return view;
    }
    
    //--- Init
    
    
    
    //--- Actions
    
    
    //--- Action submitClick
    
    //--- Body End
}
