// Package: com.lightningkite.rxexample.vg
// Generated by Khrysalis - this file will be overwritten.
import { ComponentTestBinding } from '../resources/layouts/ComponentTestBinding'
import { SelectDemoBinding } from '../resources/layouts/SelectDemoBinding'
import { BasicExampleVG } from './BasicExampleVG'
import { ControlsDemoVG } from './ControlsDemoVG'
import { DateButtonDemoVG } from './DateButtonDemoVG'
import { ExampleContentVG } from './ExampleContentVG'
import { ExternalTestVG } from './ExternalTestVG'
import { HttpDemoVG } from './HttpDemoVG'
import { LoadImageDemoVG } from './LoadImageDemoVG'
import { LocationDemoVG } from './LocationDemoVG'
import { LoginDemoVG } from './LoginDemoVG'
import { PreviewVG } from './PreviewVG'
import { SliderDemoVG } from './SliderDemoVG'
import { VideoDemoVG } from './VideoDemoVG'
import { ViewPagerDemoVG } from './ViewPagerDemoVG'
import { WebsocketDemoVG } from './WebsocketDemoVG'
import { StackSubject, ViewGenerator, showIn, subscribeAutoDispose, xStackPush } from '@lightningkite/rxjs-plus'
import { first } from 'iter-tools-es'
import { Observable, fromEvent, of } from 'rxjs'
import { mergeMap, take } from 'rxjs/operators'

//! Declares com.lightningkite.rxexample.vg.SelectDemoVG
export class SelectDemoVG implements ViewGenerator {
    public static implementsViewGenerator = true;
    public constructor(public readonly stack: StackSubject<ViewGenerator>) {
        this.options = [new BasicExampleVG(), new VideoDemoVG(), new WebsocketDemoVG(), new HttpDemoVG(), new ExternalTestVG(), new DateButtonDemoVG(), new LocationDemoVG(), new LoginDemoVG(this.stack), new LoadImageDemoVG(), new ControlsDemoVG(), new ExampleContentVG(), new ViewPagerDemoVG(this.stack), new SliderDemoVG(), new PreviewVG()];
    }
    
    //! Declares com.lightningkite.rxexample.vg.SelectDemoVG.titleString
    public get titleString(): string { return "Select Demo"; }
    
    
    public readonly options: Array<ViewGenerator>;
    
    public selectVG(viewGenerator: ViewGenerator): void {
        xStackPush(this.stack, viewGenerator);
    }
    
    public generate(dependency: Window): HTMLElement {
        const xml = SelectDemoBinding.inflate();
        const view = xml.root;
        
        first(this.options)!;
        of(this.options).pipe(showIn(xml.list, (obs: Observable<ViewGenerator>): HTMLElement => {
            const xml = ComponentTestBinding.inflate();
            const view = xml.root;
            obs.pipe(subscribeAutoDispose(xml.label, (this_: HTMLElement, it: ViewGenerator): void => {
                this_.innerText = it.titleString;
            }));
            fromEvent(xml.button, "click", ev => ev.preventDefault()).pipe(mergeMap((it: void): Observable<ViewGenerator> => (obs.pipe(take(1))))).pipe(subscribeAutoDispose(view, (this_: HTMLDivElement, it: ViewGenerator): void => {
                this.selectVG(it);
            }));
            return view;
        }));
        
        return view;
    }
}
