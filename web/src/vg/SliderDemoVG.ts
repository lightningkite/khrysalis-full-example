// File: /home/jivie/Projects/khrysalis-full-example/android/src/main/java/com/lightningkite/rxexample/vg/SliderDemoVG.kt
// Package: com.lightningkite.rxexample.vg
// Generated by Khrysalis - this file will be overwritten.
import { BehaviorSubject, Subject } from 'rxjs'
import { ViewGenerator, bind, mapSubject, subscribeAutoDispose } from 'rxjs-plus'
import { SliderDemoBinding } from '../resources/layouts/SliderDemoBinding'

//! Declares com.lightningkite.rxexample.vg.SliderDemoVG
export class SliderDemoVG implements ViewGenerator {
    public static implementsViewGenerator = true;
    public constructor() {
        this.ratio = new BehaviorSubject(0);
        this.percent = this.ratio.pipe(mapSubject((it: number): number => Math.floor((it * 100)), (it: number): number => it / 100));
        this.obsRatingInt = this.ratio.pipe(mapSubject((it: number): number => Math.floor((it * 5)), (it: number): number => it / 5));
        this.obsRatingFloat = this.ratio.pipe(mapSubject((it: number): number => it * 5, (it: number): number => it / 5));
    }
    
    //! Declares com.lightningkite.rxexample.vg.SliderDemoVG.titleString
    public get titleString(): string { return "Slider Demo"; }
    
    
    public readonly ratio: BehaviorSubject<number>;
    public readonly percent: Subject<number>;
    public readonly obsRatingInt: Subject<number>;
    public readonly obsRatingFloat: Subject<number>;
    
    public generate(dependency: Window): HTMLElement {
        const xml = SliderDemoBinding.inflate();
        const view = xml.root;
        
        xml.slider.max = (100 - 0).toString();
        this.percent.pipe(bind(xml.slider, "valueAsNumber", "input"));
        this.percent.pipe(subscribeAutoDispose(xml.valueDisplay, (this_: HTMLElement, it: number): void => {
            xml.valueDisplay.textContent = it.toString();
        }));
        //        xml.progress.max = 10000;
        this.ratio.pipe(subscribeAutoDispose(xml.progress, "value"));
        
        xml.rating.max = (5).toString();
        xml.rating.step = (1).toString();
        this.obsRatingInt.pipe(mapSubject(x => x, x => Math.floor(x))).pipe(bind(xml.rating, "valueAsNumber", "input"));
        xml.ratingDisplayStars.max = (5).toString();
        this.obsRatingInt.pipe(mapSubject(x => x, x => Math.floor(x))).pipe(bind(xml.ratingDisplayStars, "valueAsNumber", "input"));
        xml.ratingDisplayStarsSmall.max = (5).toString();
        this.obsRatingInt.pipe(mapSubject(x => x, x => Math.floor(x))).pipe(bind(xml.ratingDisplayStarsSmall, "valueAsNumber", "input"));
        
        this.obsRatingInt.pipe(subscribeAutoDispose(xml.ratingDisplayNumber, (this_: HTMLElement, it: number): void => {
            xml.ratingDisplayNumber.textContent = it.toString();
        }));
        
        xml.ratingFloat.step = (0.01).toString();
        xml.ratingFloat.max = (5).toString();
        this.obsRatingFloat.pipe(subscribeAutoDispose(xml.ratingFloat, (this_: HTMLDivElement, it: number): void => {
            xml.ratingFloat.valueAsNumber = it;
        }));
        xml.ratingDisplayStarsFloat.max = (5).toString();
        this.obsRatingFloat.pipe(subscribeAutoDispose(xml.ratingDisplayStarsFloat, (this_: HTMLDivElement, it: number): void => {
            xml.ratingDisplayStarsFloat.valueAsNumber = it;
        }));
        xml.ratingDisplayStarsSmallFloat.max = (5).toString();
        this.obsRatingFloat.pipe(subscribeAutoDispose(xml.ratingDisplayStarsSmallFloat, (this_: HTMLDivElement, it: number): void => {
            xml.ratingDisplayStarsSmallFloat.valueAsNumber = it;
        }));
        this.obsRatingFloat.pipe(subscribeAutoDispose(xml.ratingDisplayNumberFloat, (this_: HTMLElement, it: number): void => {
            xml.ratingDisplayNumberFloat.textContent = it.toString();
        }));
        
        return view;
    }
}
