// Package: com.lightningkite.rxexample.vg
// Generated by Khrysalis - this file will be overwritten.
import KhrysalisRuntime
import RxSwift
import UIKit
import RxSwiftPlus
import Foundation

public final class WebsocketDemoVG : ViewGenerator, HasTitle {
    public init() {
        self.socket = HttpClient.INSTANCE
            .webSocket(url: "wss://echo.websocket.events")
            .replay(1)
            .refCount()
        self.text = ValueSubject("")
        //Necessary properties should be initialized now
    }
    
    
    public var title: String {
        get { return "Websocket Demo" }
    }
    
    public let socket: Observable<WebSocketInterface>
    
    public let text: ValueSubject<String>
    
    public func generate(dependency: ViewControllerAccess) -> UIView {
        let xml = WebsocketDemoBinding()
        let view = xml.root
        
        //--- Set Up xml.items
        var responses = ([] as Array<WebSocketFrame>)
        
        self.socket
            .switchMap { (it) -> Observable<WebSocketFrame> in it.read }
            .map { (it) -> Array<WebSocketFrame> in
            responses = responses + [it]
            if responses.count > 20 {
                responses = Array(responses.suffix(20))
            }
            return responses
        }
            .startWith(responses)
            .retry()
            .showIn(xml.items, makeView: { (observable) -> UIView in
            //--- Make Subview For xml.items (overwritten on flow generation)
            let cellXml = ComponentTextBinding()
            let cellView = cellXml.root
            
            //--- Set Up cellXml.label
            observable
                .map { (it) -> String in it.text ?? "" }
                .subscribeAutoDispose(cellXml.label, \UILabel.text)
            //--- End Make Subview For xml.items (overwritten on flow generation)
            return cellView
        })
        
        //--- Set Up xml.input
        self.text.bind(xml.input)
        
        //--- Set Up xml.submit
        xml.submit.onClick { () -> Void in self.socket
                .take(1)
                .subscribe(onNext: { (it) -> Void in it.write.onNext(WebSocketFrame(text: self.text.value)) })
            .disposed(by: xml.submit.removed) }
        
        //--- Generate End (overwritten on flow generation)
        
        return view
    }
    
    //--- Init
    
    
    
    //--- Actions
    
    
    //--- Action submitClick
    
    //--- Body End
}

