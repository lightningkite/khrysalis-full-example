// Package: com.lightningkite.rxexample.vg
// Generated by Khrysalis - this file will be overwritten.
import KhrysalisRuntime
import RxSwift
import UIKit
import RxSwiftPlus
import Foundation

public class LoadImageDemoVG : ViewGenerator {
    public init() {
        self.canUpload = (ValueSubject(nil as Bool?) as ValueSubject<Bool?>)
        self.currentImage = (ValueSubject(nil as Image?) as ValueSubject<Image?>)
        //Necessary properties should be initialized now
    }
    
    public var titleString: String {
        get { return "Load Image Demo" }
    }
    
    public let canUpload: ValueSubject<Bool?>
    public let currentImage: ValueSubject<Image?>
    
    public func generate(dependency: ViewControllerAccess) -> UIView {
        let xml = LoadImageDemoBinding()
        let view = xml.root
        
        self.currentImage.subscribe(onNext: { (it) -> Void in self.canUpload.value = nil }).disposed(by: view.removed)
        
        self.currentImage.subscribeAutoDispose(xml.image, { (this, it) -> Void in xml.image.setImage(it) })
        xml.camera.onClick { () -> Void in dependency.requestImageCamera().subscribe(onSuccess: { (url) -> Void in self.currentImage.value = ImageLocalUrl(url) }) }
        xml.galleryMultiple.onClick { () -> Void in dependency.requestImagesGallery().subscribe(onSuccess: { (urls) -> Void in if let url = (urls.firstOrNull()) {
            self.currentImage.value = ImageLocalUrl(url)
        } }) }
        xml.gallery.onClick { () -> Void in dependency.requestImageGallery().subscribe(onSuccess: { (url) -> Void in self.currentImage.value = ImageLocalUrl(url) }) }
        xml.loremPixel.onClick { () -> Void in self.currentImage.value = ImageRemoteUrl(URL(string: "https://picsum.photos/200")!) }
        xml.checkCanUpload.onClick { () -> Void in if let i = (self.currentImage.value) {
            i.toRequestBody().subscribe(onSuccess: { (it) -> Void in self.canUpload.value = true }, onError: { (it) -> Void in
                it.printStackTrace()
                self.canUpload.value = false
            })
        } }
        self.canUpload.map({ (it) -> String in it == nil ? "Not checked" : it == true ? "Good to go!" : "FAILED!!!" }).subscribeAutoDispose(xml.canUpload, \UILabel.text)
        return view
    }
}

