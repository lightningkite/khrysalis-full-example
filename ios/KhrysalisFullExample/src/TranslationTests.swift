// Package: com.lightningkite.rxexample
// Generated by Khrysalis - this file will be overwritten.
import KhrysalisRuntime
import RxSwift
import UIKit
import RxSwiftPlus
import Foundation

public func test(old: UIView, new: UICollectionView, layout: ViewGroup, response: HttpResponse) -> Void {
    let regex = (try! NSRegularExpression(pattern: "asdf", options: []))
    let a = "asdf".matches(regex)
    let b = "asdf".uppercased()
    let c = "d".uppercased()
    let d = [1, 2, 3].reduceOrNull { (acc, i) -> Int in acc + i }
    //    val e = mapOf<Int, Int>(1 to 2, 3 to 4) - Pair(3, 4)
    let f = Pair(from: dictionaryOf(Pair(1, 2)).first())
    let g = Optional<Int>.none != nil
    print(TimeZone.current.identifier)
    old.replace(other: new)
    old.exists = false
    old.exists = true
    old.visible = false
    old.visible = true
    layout.addArrangedSubview(old)
    print(response.code)
    MultipartBody.from(MultipartBody.Part.value(name: "asdf", value: "fdsa"), MultipartBody.Part.file(name: "asdf", filename: "fdsa", body: xStringToRequestBody("asdf")))
    let h = Observable.just(1).withWrite { (it) -> Void in print("write") }
    let i = Observable.just(1).combineLatest(Observable.just(2), { (a, b) -> Int in a + b })
    let j = (PublishSubject() == 2)
    new.collectionViewLayout = QuickCompositionalLayout.grid(orthogonalCount: 3)
    let k = Observable.just(1).distinctUntilChanged({ (it) -> Int in it / 2 })
    (ValueSubject(1 as Int?) as ValueSubject<Int?>).value = nil
    fatalError()
    fatalError()
}
